// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	app "github.com/mendersoftware/deviceconnect/app"

	io "io"

	mock "github.com/stretchr/testify/mock"

	model "github.com/mendersoftware/deviceconnect/model"
)

// App is an autogenerated mock type for the App type
type App struct {
	mock.Mock
}

// DeleteDevice provides a mock function with given fields: ctx, tenantID, deviceID
func (_m *App) DeleteDevice(ctx context.Context, tenantID string, deviceID string) error {
	ret := _m.Called(ctx, tenantID, deviceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, tenantID, deviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FreeUserSession provides a mock function with given fields: ctx, sessionID
func (_m *App) FreeUserSession(ctx context.Context, sessionID string) error {
	ret := _m.Called(ctx, sessionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetControlRecorder provides a mock function with given fields: ctx, sessionID
func (_m *App) GetControlRecorder(ctx context.Context, sessionID string) *app.ControlRecorder {
	ret := _m.Called(ctx, sessionID)

	var r0 *app.ControlRecorder
	if rf, ok := ret.Get(0).(func(context.Context, string) *app.ControlRecorder); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*app.ControlRecorder)
		}
	}

	return r0
}

// GetDevice provides a mock function with given fields: ctx, tenantID, deviceID
func (_m *App) GetDevice(ctx context.Context, tenantID string, deviceID string) (*model.Device, error) {
	ret := _m.Called(ctx, tenantID, deviceID)

	var r0 *model.Device
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Device); ok {
		r0 = rf(ctx, tenantID, deviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenantID, deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecorder provides a mock function with given fields: ctx, sessionID
func (_m *App) GetRecorder(ctx context.Context, sessionID string) *app.Recorder {
	ret := _m.Called(ctx, sessionID)

	var r0 *app.Recorder
	if rf, ok := ret.Get(0).(func(context.Context, string) *app.Recorder); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*app.Recorder)
		}
	}

	return r0
}

// GetSessionRecording provides a mock function with given fields: ctx, id, w
func (_m *App) GetSessionRecording(ctx context.Context, id string, w io.Writer) error {
	ret := _m.Called(ctx, id, w)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Writer) error); ok {
		r0 = rf(ctx, id, w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HealthCheck provides a mock function with given fields: ctx
func (_m *App) HealthCheck(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PrepareUserSession provides a mock function with given fields: ctx, sess
func (_m *App) PrepareUserSession(ctx context.Context, sess *model.Session) error {
	ret := _m.Called(ctx, sess)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Session) error); ok {
		r0 = rf(ctx, sess)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProvisionDevice provides a mock function with given fields: ctx, tenantID, device
func (_m *App) ProvisionDevice(ctx context.Context, tenantID string, device *model.Device) error {
	ret := _m.Called(ctx, tenantID, device)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Device) error); ok {
		r0 = rf(ctx, tenantID, device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProvisionTenant provides a mock function with given fields: ctx, tenant
func (_m *App) ProvisionTenant(ctx context.Context, tenant *model.Tenant) error {
	ret := _m.Called(ctx, tenant)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Tenant) error); ok {
		r0 = rf(ctx, tenant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoteTerminalAllowed provides a mock function with given fields: ctx, tenantID, deviceID, groups
func (_m *App) RemoteTerminalAllowed(ctx context.Context, tenantID string, deviceID string, groups []string) (bool, error) {
	ret := _m.Called(ctx, tenantID, deviceID, groups)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) bool); ok {
		r0 = rf(ctx, tenantID, deviceID, groups)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, tenantID, deviceID, groups)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveSessionRecording provides a mock function with given fields: ctx, id, sessionBytes
func (_m *App) SaveSessionRecording(ctx context.Context, id string, sessionBytes []byte) error {
	ret := _m.Called(ctx, id, sessionBytes)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, id, sessionBytes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeviceStatus provides a mock function with given fields: ctx, tenantID, deviceID, status
func (_m *App) UpdateDeviceStatus(ctx context.Context, tenantID string, deviceID string, status string) error {
	ret := _m.Called(ctx, tenantID, deviceID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, tenantID, deviceID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
